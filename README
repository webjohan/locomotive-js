locomotive.js is a node.js webframework targeted on easy development during a prototyping stage.

It features:
- expressive routing
- template rendering and djangoesque template language.
- database api
- staticfiles module for resolving of javascript and css files.

Running on node.js makes this a very fast framework for setting up and starting development right away.
Featuring a very syntactic sugar with the methods .get()/.post()/.put()
a developer can be sure that the right method is always used as it blocks the other types.

delete() not supported yet due to not finding a proper way of dealing with delete-keyword.

----

Starting a server is as easy as a sunday morning

var app = require('./app').start('portnumber');

And resolving a request into a response is even easier

1) create your method (app.get();)
this takes a route and a callback with the request and response.

app.get('/', function(request, response){
	response.writeHead(200, {"Content-Type": "text/plain"});
	response.write("Request handler 'root' was called.");
	response.end();
});

2) Open your browser and go to 127.0.0.1:yourportnumber/ and see the result!

Creating a more advanced view:

When creating a view you always get access to the views varables with the view object.
The variables from the url is always stored as the name that you assign it.


app.get('/someURL/{id}/', function(request, response) {
	var id = request.view.id;
	var context = { 'userid':id };
	resolver.renderTemplate('/someTemplate.html', context, request, response);
});

The {id} is optional and specified in your urls configuration.

Specifying a variable to use in the url is done in the urls.js like this:

regexps : function() {
			return {'{id}':'(\\d+)', '{firstName}':'(\\w+)', '{lastName}':'(\\w+)' };
}

This will enable you to use the {id}/{firstName}/{lastName} in your view.
When specifying a {varname}, you automatically get a an object on your request called a "view object".
This is accessed like so

var something = request.view.varname; // varname is the name of your variable, ie. firstName, lastName.

Each view, if you specify a template takes an optional context object, which is a normal javascript literal.
If not, the template renders just fine!

Should you leave out a templatename, a Template Missing is thrown and raised.